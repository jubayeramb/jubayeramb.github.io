---
import SuggestedTags from "@/components/SuggestedTags.astro";
import Layout from "./Layout.astro";
import type { BlogPostFrontMatter, BlogPostType } from "@/types";
import { getAllUniqueTags, getFullDate } from "@/utils";

const allPosts: BlogPostType[] = await Astro.glob("../pages/writings/*.md");
const uniqueTags = getAllUniqueTags(allPosts);

type Props = { frontmatter: BlogPostFrontMatter };
const {
  frontmatter: {
    title,
    description,
    pubDate,
    updatedDate,
    image,
    imageAlt,
    tags,
  },
} = Astro.props;
---

<Layout {title} {description} {image} keywords={tags}>
  <article class="py-6 md:px-6 font-tailwindDefault blog-content">
    <div class="mb-5">
      <div class="mb-4">
        <h1
          class="text-4xl font-extrabold tracking-tight md:text-5xl lg:leading-[3.5rem]"
        >
          {title}
        </h1>
        <p class="text-sm text-content/70 mt-2">
          Posted on <time datetime={pubDate}>{getFullDate(pubDate)}</time>
        </p>
      </div>
      {
        image ? (
          <figure>
            <img
              src={image}
              alt="Cover image"
              width="1250"
              height="340"
              class="aspect-video object-cover rounded-md mb-3"
            />
          </figure>
        ) : null
      }
      <!-- <figcaption>This is the part of the <figure> tag {alt}</figcaption> -->
      <div class="flex flex-row flex-wrap gap-1">
        {
          tags?.length > 0 &&
            tags.map((tag) => (
              <p class="text-xs px-1 border border-dashed border-indigo-400 hover:border-indigo-500 rounded-md">
                <a href={`/tags/${tag}`}>{tag}</a>
              </p>
            ))
        }
      </div>
    </div>
    <slot />
  </article>
  <SuggestedTags tags={uniqueTags} />
</Layout>

<script>
  const preElements = document.querySelectorAll("pre");
  if (preElements.length > 0) {
    const copyToClipboard = (text: string) => {
      navigator.clipboard.writeText(text);
    };

    preElements.forEach((preElement, idx) => {
      const parentDiv = document.createElement("div");
      parentDiv.classList.add("code-block");
      preElement.parentNode?.insertBefore(parentDiv, preElement);

      const button = document.createElement("button");
      button.textContent = "Copy";
      button.classList.add("copy-button");

      const span = document.createElement("span");
      span.textContent = "Copied!";
      span.classList.add("copied", "hidden");
      span.id = `copied-${idx}`;

      button.addEventListener("click", () => {
        copyToClipboard(preElement.textContent || "");
        document.getElementById(`copied-${idx}`)?.classList.remove("hidden");
      });

      button.addEventListener("mouseleave", () => {
        document.getElementById(`copied-${idx}`)?.classList.add("hidden");
      });

      parentDiv.appendChild(preElement);
      parentDiv.appendChild(button);
      parentDiv.appendChild(span.cloneNode(true));
    });
  }
</script>
